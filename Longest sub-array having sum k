Longest sub-array having sum k
Given an array arr[] of size n containing integers. The problem is to find the length of the longest sub-array having sum equal to the given value k.

Examples:

Input : arr[] = { 10, 5, 2, 7, 1, 9 }, 
            k = 15
Output : 4
The sub-array is {5, 2, 7, 1}.

Input : arr[] = {-5, 8, -14, 2, 4, 12},
            k = -5
Output : 5
Recommended: Please solve it on PRACTICE first, before moving on to the solution.
Naive Approach: Consider the sum of all the sub-arrays and return the length of the longest sub-array having sum ‘k’. Time Complexity is of O(n^2).

Efficient Approach: Following are the steps:

Initialize sum = 0 and maxLen = 0.
Create a hash table having (sum, index) tuples.
For i = 0 to n-1, perform the following steps:
Accumulate arr[i] to sum.
If sum == k, update maxLen = i+1.
Check whether sum is present in the hash table or not. If not present, then add it to the hash table as (sum, i) pair.
Check if (sum-k) is present in the hash table or not. If present, then obtain index of (sum-k) from the hash table as index. Now check if maxLen < (i-index), then update maxLen = (i-index).
Return maxLen.
filter_none
edit
play_arrow

brightness_4
// C++ implementation to find the length 
// of longest subarray having sum k 
#include <bits/stdc++.h> 
using namespace std; 
  
// function to find the length of longest 
// subarray having sum k 
int lenOfLongSubarr(int arr[],  
                    int n, 
                    int k) 
{ 
  
    // unordered_map 'um' implemented  
    // as hash table 
    unordered_map<int, int> um; 
    int sum = 0, maxLen = 0; 
  
    // traverse the given array 
    for (int i = 0; i < n; i++) { 
  
        // accumulate sum 
        sum += arr[i]; 
  
        // when subarray starts from index '0' 
        if (sum == k) 
            maxLen = i + 1; 
  
        // make an entry for 'sum' if it is 
        // not present in 'um' 
        if (um.find(sum) == um.end()) 
            um[sum] = i; 
  
        // check if 'sum-k' is present in 'um' 
        // or not 
        if (um.find(sum - k) != um.end()) { 
  
            // update maxLength 
            if (maxLen < (i - um[sum - k])) 
                maxLen = i - um[sum - k]; 
        } 
    } 
  
    // required maximum length 
    return maxLen; 
} 
  
// Driver Code 
int main() 
{ 
    int arr[] = {10, 5, 2, 7, 1, 9}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int k = 15; 
    cout << "Length = "
         << lenOfLongSubarr(arr, n, k); 
    return 0; 
} 

Output:
Length = 4
Time Complexity: O(n).
Auxiliary Space: O(n).
